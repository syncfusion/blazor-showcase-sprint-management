@page "/"
@implements IDisposable
<div class="main-container">
    <div class="sm-sidebar-container">
        <SideBar onPageChange="HandlePageChange">

        </SideBar>
    </div>
    <div class="sm-content-container">
        <div class="sm-header">
            <Header onDataSourceChange="HandleDataSource" AssignmentCollection="@assignmentCollection" DataSource="@dataSource">
            </Header>
        </div>
        <div class="sm-body-content">
            <Content currentPage="@currentPage" onContentDataSourceChanged="HandleDataSource" AssignmentCollection="@assignmentCollection" DataSource="@dataSource">

            </Content>
        </div>
    </div>
    <div class="mobile-nav-bar">
        <MobileNavBar onPageChange="HandlePageChange">

        </MobileNavBar>
    </div>
</div>

<style>
    .sm-sidebar-container {
    width: 80px;
    background-color: #0d9488;
    position: relative;
    height: 100vh;
    }

    .sm-content-container {
    flex: 1;
    padding: 20px;
    box-sizing: border-box;
    position: relative;
    }

    .sm-header {
    background-color: white;
    margin-bottom: 10px;
    }

    .sm-body-content {
    border: 1px solid #cfd8dc;
    }

    .main-container {
    display: flex;
    height: 100vh;
    flex-direction: row;
    position: absolute;
    }

    @@media (min-width: 800px) and (max-width: 855px) {
    .sm-sidebar-container {
    width: 65px;
    }
    }

    @@media (min-width: 700px) and (max-width: 800px) {
    .sm-sidebar-container {
    width: 50px;
    }
    }

    @@media only screen and (max-width: 700px) {
    .sm-sidebar-container {
    display: none;
    }
    }

    @@media only screen and (max-width: 700px) {
    .mobile-nav-bar {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 50px;
    background-color: #0d9488;
    display: flex;
    justify-content: space-around;
    align-items: center;
    z-index: 1000;
    }
    }

    @@media only screen and (min-width: 700px) {
    .mobile-nav-bar {
    display: none;
    }
    }
</style>

@code {

    private string? currentPage { get; set; }
    private List<SprintManagmentModel.TaskInfoModel>? dataSource { get; set; }
    private List<SprintManagmentModel.AssignmentModel>? assignmentCollection { get; set; }
    protected override void OnInitialized()
    {
        SprintManagmentModel.SprintPlans = new Dictionary<int, List<SprintManagmentModel.TaskInfoModel>>()
        {
            { 1, SprintManagmentModel.ProjectCollection1() },
            { 2, SprintManagmentModel.ProjectCollection2() },
            { 3, SprintManagmentModel.ProjectCollection3() }
        };

        SprintManagmentModel.AssignmentCollections = new Dictionary<int, List<SprintManagmentModel.AssignmentModel>>()
        {
            { 1, SprintManagmentModel.ProjectAssignmentCollection1() },
            { 2, SprintManagmentModel.ProjectAssignmentCollection2() },
            { 3, SprintManagmentModel.ProjectAssignmentCollection3() }
        };

        SprintManagmentModel.PreviousData = new Dictionary<int, List<SprintManagmentModel.TaskInfoModel>>()
        {
            { 1, SprintManagmentModel.SprintPlans[1] },
            { 2, SprintManagmentModel.SprintPlans[2] },
            { 3, SprintManagmentModel.SprintPlans[3] }
        };
        dataSource = SprintManagmentModel.SprintPlans[1];
        assignmentCollection = SprintManagmentModel.AssignmentCollections[1];
        SprintManagmentModel.ChangeValue = "Project 1";
        currentPage = "Kanban";
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("getHeight");
        }
    }
    private void HandlePageChange(string pageName)
    {
        currentPage = pageName;
    }
    private void HandleDataSource(SprintManagmentModel.SprintModel collections)
    {
        dataSource = collections.ProjectCollection;
        assignmentCollection = collections.ResourceAssignmentCollection;
    }
    public void Dispose()
    {
        dataSource = null;
        assignmentCollection = null;
        SprintManagmentModel.SprintPlans = new Dictionary<int, List<SprintManagmentModel.TaskInfoModel>>();
        SprintManagmentModel.AssignmentCollections = new Dictionary<int, List<SprintManagmentModel.AssignmentModel>>();
        SprintManagmentModel.PreviousData = new Dictionary<int, List<SprintManagmentModel.TaskInfoModel>>();
    }
}