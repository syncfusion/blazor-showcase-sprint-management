<SfGrid @ref="Grids" DataSource="@GridData!.ToList()" AllowGrouping="true" Toolbar="@(new List<Object>() { "Cancel", "Update" , "Delete", "Edit"})">
    <GridGroupSettings ShowDropArea="false" Columns="@GroupedColumns">
        <CaptionTemplate>
            @{
                var data = (context as CaptionTemplateContext); 
                <span>@data!.Key</span>
            }
        </CaptionTemplate>
    </GridGroupSettings>
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Dialog"></GridEditSettings>
    <GridColumns>
        <GridColumn Field=@nameof(SprintManagmentModel.TaskInfoModel.Id) IsPrimaryKey="true" HeaderText="ID" Visible="false" TextAlign="TextAlign.Center"></GridColumn>
        <GridColumn Field=@nameof(SprintManagmentModel.TaskInfoModel.Subject) HeaderText="Subject" Width="230px" ClipMode="Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip" AllowGrouping="false"></GridColumn>
        <GridColumn Field=@nameof(SprintManagmentModel.TaskInfoModel.StartTime) HeaderText="Start Date" Format="d" TextAlign="TextAlign.Center" Width="100px" AllowGrouping="false" EditType="EditType.DateTimePickerEdit"></GridColumn>
        <GridColumn Field=@nameof(SprintManagmentModel.TaskInfoModel.EndTime) HeaderText="End Date" Format="d" TextAlign="TextAlign.Center" Width="100px" EditType="EditType.DateTimePickerEdit"></GridColumn>
        <GridColumn Field=@nameof(SprintManagmentModel.TaskInfoModel.Priority) HeaderText="Priority" TextAlign="TextAlign.Center" Width="120px" EditType="EditType.DropDownEdit"></GridColumn>
        <GridColumn Field=@nameof(SprintManagmentModel.TaskInfoModel.Progress) HeaderText="Progress" TextAlign="TextAlign.Center" Width="120px" EditType="EditType.NumericEdit"></GridColumn>
        <GridColumn Field=@nameof(SprintManagmentModel.TaskInfoModel.Status) HeaderText="Status" TextAlign="TextAlign.Center" Width="120px" EditType="EditType.DropDownEdit"></GridColumn>
        <GridColumn Field=@nameof(SprintManagmentModel.TaskInfoModel.Assignee) EditType="EditType.DropDownEdit" ></GridColumn>
    </GridColumns>
    <GridEvents RowUpdating="RowUpdatingHandler" RowDeleted="RowDeletedHandler" RowUpdated="RowUpdatedHandler" TValue="SprintManagmentModel.TaskInfoModel"></GridEvents>
</SfGrid>
@code{
    public string[] GroupedColumns = new string[] { "Assignee" };
    public SfGrid<SprintManagmentModel.TaskInfoModel>? Grids;
    [Parameter]
    public List<SprintManagmentModel.TaskInfoModel>? GridData { get; set; }
    [Parameter]
    public List<SprintManagmentModel.AssignmentModel>? AssignmentCollection { get; set; }
    [Parameter]
    public EventCallback<SprintManagmentModel.SprintModel> onGridDataSourceChange { get; set; }

    public void RowUpdatingHandler(RowUpdatingEventArgs<SprintManagmentModel.TaskInfoModel> args)
    {
        if (args.Data != null)
        {
            if (args.Data.Progress > 100 || (args.Data.Progress < 100 && args.Data.Status == "Done"))
            {
                args.Data.Progress = 100;
            }
            if (args.Data.Progress == 100)
            {
                args.Data.Status = "Done";
            }
            if (args.Data.Progress == 0 && args.Data.Status != "Open")
            {
                args.Data.Status = "Open";
            }
            switch (args.Data.Assignee)
            {
                case "Martin Tamer":
                    args.Data.ClassName = "e-martintamer";
                    break;
                case "Rose Fuller":
                    args.Data.ClassName = "e-rosefuller";
                    break;
                case "Margaret Buchanan":
                    args.Data.ClassName = "e-margaretbuchanan";
                    break;
                case "Fuller King":
                    args.Data.ClassName = "e-fullerking";
                    break;
                case "Davolio Fuller":
                    args.Data.ClassName = "e-davoliofuller";
                    break;
            }
            foreach (var resource in SprintManagmentModel.ResourcesCollection)
            {
                if (resource.ResourceName == args.Data.Assignee)
                {
                    SprintManagmentModel.AssignmentModel assignmentRecord = AssignmentCollection!.FirstOrDefault(s => s.TaskId == args.Data.Id);
                    if (assignmentRecord != null)
                    {
                        assignmentRecord.ResourceId = resource.ResourceId;
                    }
                }
            }

        }

    }
    public void RowDeletedHandler(RowDeletedEventArgs<SprintManagmentModel.TaskInfoModel> args)
    {
        GridData!.Remove(args.Datas[0]);
        switch (SprintManagmentModel.ChangeValue)
        {
            case "Project 1":
                SprintManagmentModel.PreviousData[1].Remove(args.Datas[0]);
                break;
            case "Project 2":
                SprintManagmentModel.PreviousData[2].Remove(args.Datas[0]);
                break;
            case "Project 3":
                SprintManagmentModel.PreviousData[3].Remove(args.Datas[0]);
                break;
        }
        var projectCollection = new SprintManagmentModel.SprintModel { ProjectCollection = GridData, ResourceAssignmentCollection = AssignmentCollection };
        onGridDataSourceChange.InvokeAsync(projectCollection);
    }
    public void RowUpdatedHandler(RowUpdatedEventArgs<SprintManagmentModel.TaskInfoModel> args)
    {
        var projectCollection = new SprintManagmentModel.SprintModel { ProjectCollection = GridData, ResourceAssignmentCollection = AssignmentCollection };
        onGridDataSourceChange.InvokeAsync(projectCollection);
    }
}
<style>
    .e-grid {
        overflow-y: auto;
        height: 100% !important;
        max-height: 100% !important;
        width: 100% !important;
    }

    .e-dialog.e-device.e-draggable.e-popup-open {
        width: 100% !important;
        height: 100% !important;
    }

</style>